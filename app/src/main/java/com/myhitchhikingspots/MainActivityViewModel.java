package com.myhitchhikingspots;

import android.app.Application;
import android.location.Location;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;

import com.crashlytics.android.Crashlytics;
import com.google.android.gms.tasks.Task;
import com.myhitchhikingspots.db.UsuariosRepository;
import com.myhitchhikingspots.model.Usuario;

public class MainActivityViewModel extends AndroidViewModel {
    private UsuariosRepository usuariosRepository;

    public MainActivityViewModel(Application context) {
        super(context);
        usuariosRepository = ((MyHitchhikingSpotsApplication) context).getUsuariosRepository();
    }

    /**
     * Add a new Usuario to Firebase Realtime Database and return the unique id generated by firebase.
     **/
    @Nullable
    String addNewUsuario() {
        return usuariosRepository.addNewUsuario();
    }

    Task<Void> updateHwUsername(@NonNull String usuarioId, @NonNull String username) {
        return usuariosRepository.updateHwUsername(usuarioId, username);
    }

    void updateLastAccessAt(@NonNull String usuarioId, @NonNull String firebaseLoginId) {
        if (usuarioId.isEmpty()) {
            Crashlytics.logException(new Exception("UsuarioId was empty. This should be checked immediately. Usuario was not updated."));
            return;
        }
        usuariosRepository.updateLastAccessAt(usuarioId, firebaseLoginId);
    }

    void updateLastHWLoginAt(@NonNull String usuarioId) {
        if (usuarioId.isEmpty()) {
            Crashlytics.logException(new Exception("UsuarioId was empty. This should be checked immediately. Usuario was not updated."));
            return;
        }
        usuariosRepository.updateLastHWLoginAt(usuarioId);
    }

    void updateLastKnownLocation(String usuarioId, Location loc) {
        if (usuarioId == null || usuarioId.isEmpty()) {
            Crashlytics.logException(new Exception("UsuarioId was empty. This should be checked immediately. Usuario was not updated."));
            return;
        }

        if (loc == null)
            return;

        usuariosRepository.updateLastKnownLocation(usuarioId, loc);
    }

    void updateToken(@NonNull String usuarioId, @NonNull String newToken) {
        usuariosRepository.updateToken(usuarioId, newToken);
    }

    void subscribeTo(String usuarioId) {
        usuariosRepository.subscribeTo(usuarioId);
    }

    void unsubscribeFrom(String usuarioId) {
        usuariosRepository.unsubscribeFrom(usuarioId);
    }

    LiveData<Usuario> getUsuario() {
        return usuariosRepository.getUsuario();
    }

    void replaceUserKey(@NonNull String usuarioId, @NonNull String newUsuarioId) {
        usuariosRepository.replaceUserKey(usuarioId, newUsuarioId);
    }
}
